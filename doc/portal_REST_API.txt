                 REST API of Portal
                     version: 0.1

    The Portal component of Intel CS for WebRTC provides a set of REST-ful API's along with the socket.io one, and this doc is the specification of the REST-ful API's.

Rules and conventions:
    1) The REST API described in this doc can be only supported by Portal given a valid token has been created through nuve REST API and all required information carried in requests has been extracted from the token.
    2) The token got by calling nuve REST API is originally a Base64-encoded string, and the client program should parse it and convert it into a JSON object in format like:
        {tokenId: string(),
         host: string(),
         secure: boolean(),
         signature: string()}

    3) The protocol of each request is determined by the token.secure attribute. That is, if the token.secure has a value of "true", then the protocol should be "https:", otherwise the protocol should be "http:".
    4) The host segment in each request URI should be filled with the value of token.host.
    5) The segments led by ":" in request URI's must be filled with the actual values in practice.
    6) All requests must contain a header item "Content-Type" with value of "application/json".
    7) The body fields in requests and responses must be JSON objects.
    8) All the data format descriptions in this doc are in javascript-like syntax, need to translate to other notations if the client program is implemented in other languages.
    9) The "absent" value of a specific field in a data description in this doc means the field is optional in some conditions.

1. Client Joins
    request:
        method: 'POST'
        path: /clients
        body: {token: object(Token),
               queryInterval: integer(Integer)}

            Token: The JSON object described in section "Rules and conventions" - 2).
            Interval: The querying period, in milli-second.

    response:
        body: {id: string(ClientId),
               streams: [object(Stream)],
               users: [object(User)]}

            ClientId: the id allocated by Portal and carried in all consequent requests to identify the client.
            Stream: {id: string(StreamId),
                     audio: true | false | object(Audio),
                     video: object(Video),
                     from: string(ClientId)}
            User: {id: string(ClientId),
                   name: string(),
                   role: string()}

2. Client Leaves
    request:
        method: DELETE
        path: /clients/{ClientId}
        body: empty

            ClientId: The id of the current client got in "Client Join" operation.

    response:
        body: empty

3. Client Queries
    request:
        method: DELETE
        path: /clients/{ClientId}
        body: empty

    response:
        body: {published: [{string(StreamId): object(Msg)}],
               subscribed: [{string(SubscriptionId): object(Msg)}],
               notifications: [{event: string(Event), data: object(Data)}]}

            StreamId: The id of the stream the current client published in "Publish" operation.
            Msg: The status or signaling of the publication or subscription.
            Event: The event label of the notification in the room.
            Data: The data and further information of the notification.

4. Publish
    request:
        method: POST
        path: /pub/{ClientId}
        body: {type: string(StreamType),
               options: {audio: absent | boolean(Audio),
                         video: absent | boolean(Video) | {device: absent | string(Device), resolution: absent | object(Resolution)},
                         url: absent | string(URL),
                         transport: absent | string(Transport),
                         bufferSize: absent | number(BufferSize)}

            StreamType: url | webrtc, the stream type to be published.
            Audio: true | false, true by default if absent.
            Video: true | false, true by default if absent.
            Device: "camera" | "screen", "unknown" by default if absent.
            Resolution: {width: Number(Width), height: Number(Height)} | "unknown", "unknown" by default if absent.
            URL: The url of the external stream, can be absent if StreamType does not equal to "url".
            Transport: tcp | udp, The transport of the external stream, can be absent if StreamType does not equal to "url".
            BufferSize: The buffer size used in pulling the external stream, can be absent if StreamType does not equal to "url".

    response:
        body: {id: string(StreamId)}

            StreamId: The id generated by Portal which represents the successfully published stream, and should be carried in all operations upon that stream thereafter.

5. Unpublish
    request:
        method: DELETE
        path: /pub/{ClientId}/{StreamId}
        body: empty

            ClientId: The id of the current client got in "Client Join" operation.

    response:
        body: empty

6. Update publication
    request:
        method: PUT
        path: /pub/{ClientId}/{StreamId}
        body: {type: string(Type),
               Type: object(Data)}

            Type: offer | candidate | control, the siganling or controlling type to the peer of the media connection.
            Data: The sdp or candidate item of the signaling, or the controlling command.

    response:
        body: empty

7. Subscribe
    request:
        method: POST
        path: /sub/{ClientId}
        body: {type: string(SubscriptionType),
               options: {audio: boolean(false) | {from: string(StreamId), codecs: absent | [string(AudioCodec)]},
                         video: boolean(false) | {from: string(StreamId), codecs: absent | [string(VideoCodec)], resolution: absent | object(Resolution)},
                         url: absent | string(URL)}

            SubscriptionType: url | webrtc, the subscription type to be established.
            StreamId: The stream id the audio and/or video media track is expected to subscribe.
            AudioCodec: pcmu | pcma | opus | aac, the desired audio codec to subscribe, opus by default.
            VideoCodec: vp8 | h264, h264 if Subscription equals to "url", vp8 otherwise by default.
            URL: The url to where the subscription is expected to push.

    response:
        body: {id: string(SubscriptionId)}
        
            SubscriptionId: The id generated by Portal which represents the successfully gained subscription, and should be carried in all operations upon that subscription thereafter.

8. Unsubscribe
    request:
        method: DELETE
        path: /sub/{ClientId}/{SubscriptionId}
        body: empty

    response:
        body: empty

9. Update subscription 
    request:
        method: PUT
        path: /sub/{ClientId}/{SubscriptionId}
        body: {type: string(Type),
               Type: object(Data)}

            Type: offer | candidate | control, the siganling or controlling type to the peer of the media connection.
            Data: The sdp or candidate item of the signaling, or the controlling command.

    response:
        body: empty


The End.

