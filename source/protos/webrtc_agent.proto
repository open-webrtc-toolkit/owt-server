
//
syntax = "proto3";

import "access_agent.proto";

package owt;

// The webrtc service definition.
service WebRTCAgent {
  // Publish
  rpc Publish (PublishRequest) returns (PublishReply) {}
  rpc Unpublish (UnpublishRequest) returns (SimpleReply) {}
  // Subscribe
  rpc Subscribe (SubscribeRequest) returns (SubscribeReply) {}
  rpc Unsubscribe (UnsubscribeRequest) returns (SimpleReply) {}
  // Link & Cut
  rpc Linkup (LinkupRequest) returns (SimpleReply) {}
  rpc Cutoff (CutoffRequest) returns (SimpleReply) {}

  // Listen to notifications (streaming RPC)
  rpc ListenToNotifications (ListenRequest) returns (stream ProgressNotification) {}

  // Internal connections
  rpc GetInternalAddress (Empty) returns (AddressReply) {}

  // Process signaling message
  rpc ProcessSignaling (SignalingRequest) returns (SimpleReply) {}

  // Transport control
  rpc CreateTransport (TransportRequest) returns (SimpleReply) {}
  rpc DestroyTransport (IdRequest) returns (SimpleReply) {}

  // Publication/subscription control
  rpc SessionControl (ControlRequest) returns (SimpleReply) {}
}

// Send signaling message
message SignalingMessage {
  string type = 1;
  optional string sdp = 2; // Field for type "offer", "answer".
  message CandidateObject {
    string sdpMid = 1;
    string sdpMLineIndex = 2;
    string candidate = 3;
  }
  optional CandidateObject candidate = 3; // Field for type "candidate"
  // Filed for type "removed-candidates"
  repeated CandidateObject candidates = 4;
  optional string reason = 5; // Field for type "failed"
}

message SignalingRequest {
  string id = 1;
  SignalingMessage signaling = 2;
}

// The progress message for webrtc sessions ("type": "webrtc").
// Progress "name": "onTransportProgress".
message TransportProgressData {
  string transportId = 1;
  SignalingMessage status = 2;
}

// Progress "name": "onTrackUpdate".
message TrackUpdateData {
  string transportId = 1;
  // enum UpdateType {
  //   TRACK_ADDED = 0;
  //   TRACK_REMOVED = 1;
  //   TRACKS_COMPLETED = 2;
  // }
  string type = 2;
  optional string trackId = 3; // TRACK_ADDED or TRACK_REMOVED.
  optional string operationId = 4; // TRACK_ADDED or TRACKS_COMPLETED.
  optional string mid = 5; // TRACK_ADDED.
  optional string rid = 6; // TRACK_ADDED.
  // enum TrackDirection {
  //   IN = 0;
  //   OUT = 1;
  // }
  optional string direction = 7; // TRACK_ADDED.
  optional AudioFormat audio = 8; // TRACK_ADDED.
  optional VideoFormat video = 9; // TRACK_ADDED.
}

// Publish/Subscribe option
message RequestOption {
  string transportId = 1;
  message TrackOption {
    string mid = 1;
    string type = 2;
    optional string from = 3;
    optional FormatPreference formatPreference = 4;
  }
  repeated TrackOption tracks = 2;
  optional string controller = 3;
  optional string owner = 4;
}

// For creating transport
message TransportRequest {
  string id = 1;
  string controller = 2;
}

// For webrtc session control
message ControlRequest {
  string id = 1;
  repeated string tracks = 2;
  string direction = 3;
  string action = 4;
}
