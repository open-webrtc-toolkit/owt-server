# Set root logger level to ERROR and its only appender to file.
log4j.rootLogger=ERROR, file

# file is set to be a RollingFileAppender.
log4j.appender.file=org.apache.log4j.RollingFileAppender

log4j.appender.file.File=../logs/woogeen-gateway.log
log4j.appender.file.MaxFileSize=200MB
log4j.appender.file.MaxBackupIndex=12
# file uses PatternLayout.
log4j.appender.file.layout=org.apache.log4j.PatternLayout
# Print the date in ISO 8601 format
log4j.appender.file.layout.ConversionPattern=%d - %p: %c - %m%n

# Represent a connection between the WebRTC client (e.g., browser) and the server (Gateway).
log4j.logger.WebRtcConnection=INFO
# The underlying SRTP channel that the DTLS transport relies on.
log4j.logger.SrtpChannel=ERROR
# The utility for parsing the remote SDP and generating the local SDP.
log4j.logger.SdpInfo=INFO
# The wrapper of libnice (for ICE enabled WebRTC media channels) that the DTLS transport relies on.
log4j.logger.NiceConnection=INFO
# DTLS transport, the transport used to send and receive WebRTC media packets.
log4j.logger.DtlsTransport=INFO
# The resender for DTLS messages.
log4j.logger.Resender=INFO

# The underlying DTLS implementation (from third party libraries).
log4j.logger.dtls.DtlsSocket=INFO
log4j.logger.dtls.DtlsFactory=INFO
log4j.logger.dtls.SSL=ERROR
log4j.logger.dtls.DtlsSocketContext=INFO

# VP8 fragmenter to produce VP8 packets from a VP8 frame;
# It's not used for now because we don't have frames in Gateway.
log4j.logger.rtp.RtpVP8Fragmenter=DEBUG

# VP8 parser to get some information from the VP8 payload (which
# is not available from the RTP header), including the frame type,
# partitionID, picture (frame) ID, etc.
log4j.logger.rtp.RtpVP8Parser=DEBUG

# Used to support media recording at the server side;
# It's currently not enabled because it's immature and has bugs.
log4j.logger.rtp.RtpPacketQueue=INFO


# The utility to handle the received RTP packets from the browser,
# to handle the FEC/RED packets, generate NACK requests upon packet loss, and
# count receive statistics (packet loss etc.) for RTCP Receiver feedback generation, etc.
log4j.logger.woogeen.ProtectedRTPReceiver=INFO

# The utility to handle the RTP packets sent to the browser,
# to construct the FEC/RED packets if necessary, resend lost packets, and
# count send statistics (bitrate etc.) for internal QoS parameters adjustment, etc.
log4j.logger.woogeen.ProtectedRTPSender=INFO

# The raw UDP and TCP transports which are used for the connection between the Gateway and AVS.
log4j.logger.woogeen.RawTransport=INFO

# The VideoFeedbackReactor is used to connect the WebRTCFeedbackProcessor and
# the ProtectedRTPSender; the WebRTCFeedbackProcessor handles the received RTCP
# feedback from the browser including the receiver report and the NACK message,
# calculate RTT and browser packet loss, adjust target send bitrate and pass the
# information to the VideoFeedbackReactor, which will adjust the (FEC) protection parameters
# according to the RTT, the target send bitrate and the actual bitrate from the
# ProtectedRTPSender statistics, and notify ProtectedRTPSender about the new parameters.
log4j.logger.woogeen.VideoFeedbackReactor=INFO
log4j.logger.woogeen.WebRTCFeedbackProcessor=INFO

log4j.logger.woogeen.VCMFrameConstructor=DEBUG
log4j.logger.woogeen.VCMFrameDecoder=DEBUG
log4j.logger.woogeen.EncodedVideoFrameSender=DEBUG
log4j.logger.woogeen.ExternalInput=DEBUG


# Represent a connection between the Gateway and AVS, including both UDP and TCP transports.
log4j.logger.ooVoo.OoVooConnection=INFO

# The ooVoo Gateway main class, to manage the WebRTC client and help it connect to ooVoo AVS;
# it implements the OoVooProtocolListener interfaces to handle the events/data from ooVoo, and invokes
# OoVooProtocolStack interfaces to notify the events and send data to ooVoo; it implements
# the interfaces to receive the events/data from the WebRTC connection, and invokes WebRTC connection
# interfaces to notify the events and send data to the WebRTC client; it also controls the processing
# (conversion) between ooVoo signals and WebRTC signals, as well as between ooVoo media packets and WebRTC RTP packets
# which is delegated to OoVooInboundStreamProcessor and OoVooOutboundStreamProcessor.
log4j.logger.ooVoo.OoVooGateway=DEBUG

# OoVooInboundStreamProcessor handles the input as ooVoo media packets and generates the output as
# WebRTC RTP packets, or the input as ooVoo sync message and the output as WebRTC sender report.
log4j.logger.ooVoo.OoVooInboundStreamProcessor=INFO

# The job timer which is used to keep alive the connection between the Gateway and AVS.
log4j.logger.ooVoo.OoVooJobTimer=INFO

# OoVooOutboundStreamProcessor handles the input as WebRTC RTP packets and generates the output as
# ooVoo media packets, or the input as WebRTC sender report and the output as ooVoo sync message.
log4j.logger.ooVoo.OoVooOutboundStreamProcessor=INFO

log4j.logger.oovoo_gateway=INFO
log4j.logger.controller=INFO
