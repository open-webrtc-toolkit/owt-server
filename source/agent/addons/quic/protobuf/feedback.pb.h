// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feedback.proto

#ifndef PROTOBUF_INCLUDED_feedback_2eproto
#define PROTOBUF_INCLUDED_feedback_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_feedback_2eproto 

namespace protobuf_feedback_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_feedback_2eproto
namespace owt {
namespace protobuf {
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
}  // namespace protobuf
}  // namespace owt
namespace google {
namespace protobuf {
template<> ::owt::protobuf::Feedback* Arena::CreateMaybeMessage<::owt::protobuf::Feedback>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace owt {
namespace protobuf {

enum Feedback_Type {
  Feedback_Type_UNKNOWN = 0,
  Feedback_Type_KEY_FRAME_REQUEST = 1,
  Feedback_Type_Feedback_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Feedback_Type_Feedback_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Feedback_Type_IsValid(int value);
const Feedback_Type Feedback_Type_Type_MIN = Feedback_Type_UNKNOWN;
const Feedback_Type Feedback_Type_Type_MAX = Feedback_Type_KEY_FRAME_REQUEST;
const int Feedback_Type_Type_ARRAYSIZE = Feedback_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Feedback_Type_descriptor();
inline const ::std::string& Feedback_Type_Name(Feedback_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Feedback_Type_descriptor(), value);
}
inline bool Feedback_Type_Parse(
    const ::std::string& name, Feedback_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Feedback_Type>(
    Feedback_Type_descriptor(), name, value);
}
// ===================================================================

class Feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:owt.protobuf.Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feedback(Feedback&& from) noexcept
    : Feedback() {
    *this = ::std::move(from);
  }

  inline Feedback& operator=(Feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Feedback* other);
  friend void swap(Feedback& a, Feedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feedback* New() const final {
    return CreateMaybeMessage<Feedback>(NULL);
  }

  Feedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Feedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Feedback_Type Type;
  static const Type UNKNOWN =
    Feedback_Type_UNKNOWN;
  static const Type KEY_FRAME_REQUEST =
    Feedback_Type_KEY_FRAME_REQUEST;
  static inline bool Type_IsValid(int value) {
    return Feedback_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Feedback_Type_Type_MIN;
  static const Type Type_MAX =
    Feedback_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Feedback_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Feedback_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Feedback_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Feedback_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .owt.protobuf.Feedback.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::owt::protobuf::Feedback_Type type() const;
  void set_type(::owt::protobuf::Feedback_Type value);

  // @@protoc_insertion_point(class_scope:owt.protobuf.Feedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_feedback_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Feedback

// .owt.protobuf.Feedback.Type type = 1;
inline void Feedback::clear_type() {
  type_ = 0;
}
inline ::owt::protobuf::Feedback_Type Feedback::type() const {
  // @@protoc_insertion_point(field_get:owt.protobuf.Feedback.type)
  return static_cast< ::owt::protobuf::Feedback_Type >(type_);
}
inline void Feedback::set_type(::owt::protobuf::Feedback_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:owt.protobuf.Feedback.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace owt

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::owt::protobuf::Feedback_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::owt::protobuf::Feedback_Type>() {
  return ::owt::protobuf::Feedback_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_feedback_2eproto
