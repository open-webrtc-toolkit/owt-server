void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "$env.REPO_URL/owt-server"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/server"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr:'10', artifactNumToKeepStr:'10'))
  }

    stages {
        stage('Build package') {
            options { timeout(time:20,unit:'MINUTES') }
            steps {
                podTemplate(name: 'pack-server', label: 'pack-mcu-server', containers: [
                    containerTemplate(name: 'pack-on-centos-server', image: "$env.JS_MCU_BUILD",  ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '5000m', resourceLimitCpu: '6000m', network: 'host', command: 'cat')
                ]){
                    node ('pack-mcu-server') {
                      container ('pack-on-centos-server') {
                        sh "/root/packMCUInDocker.sh software $env.GIT_COMMIT $env.GIT_BRANCH $env.CHANGE_ID"
                      }
                    }
                }
            }
        }

        stage('Start test') {
            options { timeout(time:40,unit:'MINUTES') }
            when {
              expression {
                currentBuild.result == null || currentBuild.result == 'SUCCESS' 
              }
            }
            parallel {
                stage('API test') {
                    steps {
                        podTemplate(name: 'api-test-server', label: 'api-test-server', cloud: 'kubernetes', containers: [
                            containerTemplate(name: 'api-test-server', image: "$env.JSMCU_TEST_IMAGE",  ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '7000m', resourceLimitCpu: '8000m',resourceLimitMemory: '9.0Gi', resourceRequestMemory: '8.0Gi', network: 'host', command: 'cat'),
                            ]) {
                            node('api-test-server') {
                                container('api-test-server') {
                                    sh "ls -al"
                                    sh "pwd"
                                    sh "/root/start.sh ${env.GIT_COMMIT}1 ConferenceClient_api"
                                }
                            }
                        }
                    }
                }

                stage('Subscribe test') {
                    steps {
                        podTemplate(name:'subscribe-test-server', label: 'subscribe-test-server', cloud: 'kubernetes',nodeSelector: 'slave=webrtc-37', containers: [
                            containerTemplate(name: 'subscribe-test-server', image: "$env.JSMCU_TEST_IMAGE",  ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '7000m', resourceLimitCpu: '8000m',resourceLimitMemory: '9.0Gi', resourceRequestMemory: '8.0Gi', network: 'host', command: 'cat'),
                            ]) {
                            node('subscribe-test-server') {
                                container('subscribe-test-server') {
                                    sh "ls -al"
                                    sh "pwd"
                                    sh "/root/start.sh ${env.GIT_COMMIT}2 ConferenceClient_subscribe"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}

