From a476d713dc8edf4e25d9591f04d6829c0660a558 Mon Sep 17 00:00:00 2001
From: yuanchao0310 <yuanchao0310@163.com>
Date: Tue, 14 May 2019 23:56:39 +0800
Subject: [PATCH] fix dtls multi-thread crash issue (#1409)

---
 erizo/src/erizo/dtls/DtlsClient.cpp | 53 ++++++++++++++++++++++++++++++++++---
 erizo/src/erizo/dtls/DtlsSocket.h   |  1 +
 erizo/src/test/DtlsSocketTest.cpp   | 42 +++++++++++++++++++++++++++++
 3 files changed, 92 insertions(+), 4 deletions(-)
 create mode 100644 erizo/src/test/DtlsSocketTest.cpp

diff --git a/erizo/src/erizo/dtls/DtlsClient.cpp b/erizo/src/erizo/dtls/DtlsClient.cpp
index a2ff18f..ba6c3af 100644
--- a/erizo/src/erizo/dtls/DtlsClient.cpp
+++ b/erizo/src/erizo/dtls/DtlsClient.cpp
@@ -3,6 +3,8 @@
 extern "C" {
   #include <srtp2/srtp.h>
 }
+#include <mutex>  // NOLINT
+#include <thread>  // NOLINT
 
 #include <boost/thread.hpp>
 #include <boost/lexical_cast.hpp>
@@ -31,14 +33,52 @@ using std::memcpy;
 
 const char* DtlsSocketContext::DefaultSrtpProfile = "SRTP_AES128_CM_SHA1_80";
 
-X509 *DtlsSocketContext::mCert = NULL;
-EVP_PKEY *DtlsSocketContext::privkey = NULL;
+X509 *DtlsSocketContext::mCert = nullptr;
+EVP_PKEY *DtlsSocketContext::privkey = nullptr;
 
 static const int KEY_LENGTH = 1024;
 
+static std::mutex* array_mutex;
+
 DEFINE_LOGGER(DtlsSocketContext, "dtls.DtlsSocketContext");
 log4cxx::LoggerPtr sslLogger(log4cxx::Logger::getLogger("dtls.SSL"));
 
+static void ssl_lock_callback(int mode, int type, const char* file, int line) {
+  if (mode & CRYPTO_LOCK) {
+    array_mutex[type].lock();
+  } else {
+    array_mutex[type].unlock();
+  }
+}
+
+static unsigned long ssl_thread_id() {  // NOLINT
+  return (unsigned long)std::hash<std::thread::id>()(std::this_thread::get_id());  // NOLINT
+}
+
+static int ssl_thread_setup() {
+  array_mutex = new std::mutex[CRYPTO_num_locks()];
+
+  if (!array_mutex) {
+    return 0;
+  } else {
+    CRYPTO_set_id_callback(ssl_thread_id);
+    CRYPTO_set_locking_callback(ssl_lock_callback);
+  }
+  return 1;
+}
+
+static int ssl_thread_cleanup() {
+  if (!array_mutex) {
+    return 0;
+  }
+
+  CRYPTO_set_id_callback(nullptr);
+  CRYPTO_set_locking_callback(nullptr);
+  delete[] array_mutex;
+  array_mutex = nullptr;
+  return 1;
+}
+
 void SSLInfoCallback(const SSL* s, int where, int ret) {
   const char* str = "undefined";
   int w = where & ~SSL_ST_MASK;
@@ -249,7 +289,7 @@ int createCert(const std::string& pAor, int expireDays, int keyLen, X509*& outCe
     DtlsSocketContext::~DtlsSocketContext() {
       mSocket->close();
       delete mSocket;
-      mSocket = NULL;
+      mSocket = nullptr;
       SSL_CTX_free(mContext);
     }
 
@@ -258,7 +298,8 @@ int createCert(const std::string& pAor, int expireDays, int keyLen, X509*& outCe
     }
 
     void DtlsSocketContext::Init() {
-      if (DtlsSocketContext::mCert == NULL) {
+      ssl_thread_setup();
+      if (DtlsSocketContext::mCert == nullptr) {
         OpenSSL_add_all_algorithms();
         SSL_library_init();
         SSL_load_error_strings();
@@ -267,6 +308,10 @@ int createCert(const std::string& pAor, int expireDays, int keyLen, X509*& outCe
       }
     }
 
+    void DtlsSocketContext::Destroy() {
+      ssl_thread_cleanup();
+    }
+
     DtlsSocket* DtlsSocketContext::createClient() {
       return new DtlsSocket(this, DtlsSocket::Client);
     }
diff --git a/erizo/src/erizo/dtls/DtlsSocket.h b/erizo/src/erizo/dtls/DtlsSocket.h
index 2ea4795..e99cef8 100644
--- a/erizo/src/erizo/dtls/DtlsSocket.h
+++ b/erizo/src/erizo/dtls/DtlsSocket.h
@@ -187,6 +187,7 @@ class DtlsSocketContext {
   static EVP_PKEY *privkey;
 
   static void Init();
+  static void Destroy();
 
  protected:
   DtlsSocket *mSocket;
diff --git a/erizo/src/test/DtlsSocketTest.cpp b/erizo/src/test/DtlsSocketTest.cpp
new file mode 100644
index 0000000..7708111
--- /dev/null
+++ b/erizo/src/test/DtlsSocketTest.cpp
@@ -0,0 +1,42 @@
+#include <gmock/gmock.h>
+#include <gtest/gtest.h>
+
+#include <dtls/DtlsSocket.h>
+#include <string>
+#include <thread>  // NOLINT
+
+using testing::_;
+using testing::Return;
+using testing::Eq;
+
+void createDtlsClient() {
+  std::unique_ptr<dtls::DtlsSocketContext> dtls_rtp;
+  dtls_rtp.reset(new dtls::DtlsSocketContext());
+  dtls_rtp->createClient();
+}
+
+class DtlsSocketTest : public ::testing::Test {
+ protected:
+  virtual void SetUp() {
+    dtls::DtlsSocketContext::Init();
+  }
+
+  virtual void TearDown() {
+    dtls::DtlsSocketContext::Destroy();
+  }
+
+  void runTest(int number_of_clients) {
+    std::thread threads[number_of_clients];  // NOLINT
+    for (int j = 0; j < number_of_clients; j++) {
+      threads[j] = std::thread(createDtlsClient);
+    }
+    for (int j = 0; j < number_of_clients; j++) {
+      threads[j].join();
+    }
+  }
+};
+
+TEST_F(DtlsSocketTest, create_1000_DtlsClient) {
+  runTest(1000);
+  EXPECT_THAT(true, Eq(true));
+}
-- 
2.7.4

