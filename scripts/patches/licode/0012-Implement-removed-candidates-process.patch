From 77861e456fbda5d8e128a3b5e6946ddfcdd12c34 Mon Sep 17 00:00:00 2001
From: Chen Li1 <li1.chen@intel.com>
Date: Thu, 25 Oct 2018 15:00:59 +0800
Subject: [PATCH] Implement removed-candidates process

---
 erizo/src/erizo/WebRtcConnection.cpp | 51 ++++++++++++++++++++++++++++++------
 erizo/src/erizo/WebRtcConnection.h   |  7 +++++
 2 files changed, 50 insertions(+), 8 deletions(-)

diff --git a/erizo/src/erizo/WebRtcConnection.cpp b/erizo/src/erizo/WebRtcConnection.cpp
index b71f0a1..41462ee 100644
--- a/erizo/src/erizo/WebRtcConnection.cpp
+++ b/erizo/src/erizo/WebRtcConnection.cpp
@@ -384,16 +384,8 @@ bool WebRtcConnection::addRemoteCandidate(const std::string &mid, int mLineIndex
   bool res = false;
   if (tempSdp.initWithSdp(sdp, theMid)) {
     if (theType == VIDEO_TYPE || bundle_) {
-      if (this->getCurrentState() >= CONN_READY) {
-        ELOG_DEBUG("%s message: Remove remote candidate", toLog());
-        videoTransport_->removeRemoteCandidates();
-      }
       res = videoTransport_->setRemoteCandidates(tempSdp.getCandidateInfos(), bundle_);
     } else if (theType == AUDIO_TYPE) {
-      if (this->getCurrentState() >= CONN_READY) {
-        ELOG_DEBUG("%s message: Remove remote candidate", toLog());
-        audioTransport_->removeRemoteCandidates();
-      }
       res = audioTransport_->setRemoteCandidates(tempSdp.getCandidateInfos(), bundle_);
     } else {
       ELOG_ERROR("%s message: add remote candidate with no Media (video or audio), candidate: %s",
@@ -407,6 +399,49 @@ bool WebRtcConnection::addRemoteCandidate(const std::string &mid, int mLineIndex
   return res;
 }
 
+bool WebRtcConnection::removeRemoteCandidate(const std::string &mid, int mLineIndex, const std::string &sdp) {
+  // TODO(pedro) Check type of transport.
+  ELOG_DEBUG("%s message: Removing remote Candidate, candidate: %s, mid: %s, sdpMLine: %d",
+              toLog(), sdp.c_str(), mid.c_str(), mLineIndex);
+  if (videoTransport_ == nullptr && audioTransport_ == nullptr) {
+    ELOG_WARN("%s message: removeRemoteCandidate on NULL transport", toLog());
+    return false;
+  }
+
+  if (mLineIndex == -1) {
+    // End of removed candidates, retriger checks for candidates remained in remoteSdp_
+    if (videoTransport_) {
+      videoTransport_->removeRemoteCandidates();
+      videoTransport_->setRemoteCandidates(remoteSdp_.getCandidateInfos(), bundle_);
+    }
+    if (audioTransport_) {
+      audioTransport_->removeRemoteCandidates();
+      audioTransport_->setRemoteCandidates(remoteSdp_.getCandidateInfos(), bundle_);
+    }
+  } else {
+    // Remove candidate in remoteSdp_, do not care about mediaType
+    SdpInfo tempSdp(rtp_mappings_);
+    if (tempSdp.initWithSdp(sdp, "whatever")) {
+      std::vector<CandidateInfo>& rcands = remoteSdp_.getCandidateInfos();
+      auto isRemovedCand = [&tempSdp](CandidateInfo& cand) -> bool {
+        for (uint8_t it = 0; it < tempSdp.getCandidateInfos().size(); it++) {
+          CandidateInfo& tempCand = tempSdp.getCandidateInfos()[it];
+          if (tempCand.componentId == cand.componentId &&
+              tempCand.netProtocol == cand.netProtocol &&
+              tempCand.hostAddress == cand.hostAddress &&
+              tempCand.hostPort == cand.hostPort &&
+              tempCand.hostType == cand.hostType) {
+            return true;
+          }
+        }
+        return false;
+      };
+      rcands.erase(std::remove_if(rcands.begin(), rcands.end(), isRemovedCand), rcands.end());
+    }
+  }
+  return true;
+}
+
 std::string WebRtcConnection::getLocalSdp() {
   ELOG_DEBUG("%s message: Getting Local Sdp", toLog());
   if (videoTransport_ != nullptr) {
diff --git a/erizo/src/erizo/WebRtcConnection.h b/erizo/src/erizo/WebRtcConnection.h
index 5793877..1722e89 100644
--- a/erizo/src/erizo/WebRtcConnection.h
+++ b/erizo/src/erizo/WebRtcConnection.h
@@ -100,6 +100,13 @@ class WebRtcConnection: public MediaSink, public MediaSource, public FeedbackSin
    */
   bool addRemoteCandidate(const std::string &mid, int mLineIndex, const std::string &sdp);
   /**
+   * Remove remote candidate (from remote peer).
+   * @param sdp The candidate in SDP format.
+   * @return true if the SDP was received correctly.
+   */
+  bool removeRemoteCandidate(const std::string &mid, int mLineIndex, const std::string &sdp);
+
+  /**
    * Obtains the local SDP.
    * @return The SDP as a string.
    */
-- 
2.7.4

